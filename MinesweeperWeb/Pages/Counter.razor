@page "/minesweeper"
@using System.Timers


<PageTitle>Minesweeper</PageTitle>

<h1>Minesweeper</h1>

<div style="position: absolute; top: 15px; left: 255px; z-index: 1;">
    Timer: @timeElapsed
</div>

<div style="position: absolute; top: 55px; left: 1187px; font-size: 30px; color: #0c63e4; z-index: 1;">
    Best score: @maxScore
</div>

   @if (score < 0)
      {
          <div style="position: absolute; top: 82px; left: 1250px; font-size: 30px; color: #842029; z-index: 1;">
              <p> Score: @score </p>
          </div>
      }
     @if (score == 0)
      {
          <div style="position: absolute; top: 82px; left: 1250px; font-size: 30px; color: #101214; z-index: 1;">
              <p> Score: @score </p>
          </div>
      }
      @if (score > 0)
      {
          <div style="position: absolute; top: 82px; left: 1250px; font-size: 30px; color: #26b050; z-index: 1;">
              <p> Score: @score </p>
          </div>
      }


@if (gameLost)
{
    <div style="position: absolute; top: 60px; left: 790px; font-size: 50px; color: #b02a37; z-index: 1;">
        <p> You lost! </p>
    </div>
    <div style="position: absolute; top: 5px; left: 830px; font-size: 25px; color: #b02a37; z-index: 1;">
        <button @onclick="RestartGame">Restart</button>
    </div>
    
}
@if (gameWon)
{
    <div style="position: absolute; top: 60px; left: 830px; font-size: 50px; color: #26b050; z-index: 1;">
        <p> You won! </p>
    </div>
    <div style="position: absolute; top: 5px; left: 890px; font-size: 25px; color: #b02a37; z-index: 1;">
            <button @onclick="RestartGame">Restart</button>
        </div>
}

@if (showFields)
{
   <EditForm Model="@this" OnValidSubmit="SubmitForm">
    <p>Height: </p><InputNumber @bind-Value="@height" style="margin-bottom: 20px;"/>
    <p>Width: </p><InputNumber @bind-Value="@width" style="margin-bottom: 20px;"/>
    <p>Mines: </p><InputNumber @bind-Value="@mines" style="margin-bottom: 20px;"/>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>
    if (badInputBoard)
    {
        <p>Board has to be bigger than 3x3, silly!</p>
    }

    if (badInputMines)
    {
        <p>Make some mines, silly! Or get rid of some. </p>
    }

    if (largeInputBoard)
    {
        <p>Stick to less than 50 please :(</p>
    }
}

@if (!showFields)
{

    <div style="display: grid; grid-template-columns: repeat(@width, 30px); gap: 2px;">
        @for (var i = 0; i < height; i++)
        {
            var row = i;
            for (var j = 0; j < width; j++)
            {
                var col = j;
                <div @onclick="() => HandleClick(row, col)" @oncontextmenu="@(e => HandleRightClick(e, row, col))" @oncontextmenu:preventDefault="true" style="width: 30px; height: 30px; background-color: lightgray; position: relative;">
                    @if (game.board.isRevealed(row, col))
                    {
                        <span style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: black;">@(game.board.GetMinesAround(row, col))</span>
                    }
                    @if (game.board.hasMine(row, col) && gameLost || game.board.hasMine(row, col) && gameWon)
                    {
                        <img src="bomber.png" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); height: 20px; width: 20px"/>
                    }
                    @if (game.board.hasFlag(row, col) && !game.board.isRevealed(row, col))
                    {
                        if (gameWon)
                        {
                            <img src="flaggy.png" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); height: 20px; width: 20px; opacity: 0.5"/>
                        }

                        if (gameLost)
                        {
                            <img src="flaggy.png" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); height: 20px; width: 20px; opacity: 0.5"/>
                        }
                        if (!gameLost && !gameWon)
                        {
                            <img src="flaggy.png" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); height: 20px; width: 20px"/>
                        }
                    }
                </div>
            }
        }
    </div>




@code {

    int height, width, mines;
    bool badInputBoard, badInputMines, largeInputBoard;
    bool gameLost, gameWon;
    private Game game;
    private bool showFields = true;
    bool canClick = true;
    private int timeElapsed = 0;
    private Timer timer;
    private int score = 0;
    private int maxScore = 0;
    
    private void TimerElapsed(object sender, ElapsedEventArgs e)
{
    if (gameWon || gameLost)
    {
        timer.Stop();
        return;
    }

    timeElapsed++;
    InvokeAsync(StateHasChanged);
}
    
    private void SubmitForm()
    {
        if (height < 4 || width < 4)
        {
            badInputBoard = true;
            return;
        }

        if (mines < 1 || mines > ((height * width)-10))
        {
            badInputMines = true;
            return;
        }

        if (height > 50 || width > 50)
        {
            largeInputBoard = true;
            return;
        }

        game = new Game(height, width, mines);
        showFields = false;
        timer = new Timer(1000);
        if (!gameWon && !gameLost)
        {
            timer.Elapsed += TimerElapsed;
        }

        timer.Start();
    }

    private void HandleClick(int row, int col)
    {
        if (!canClick)
        {
            return;
        }

        if (!game.board.isRevealed(row, col))
        {
            game.ExecuteReveal(row, col);
            if (game.board.FieldsToReveal == 0)
            {
                gameWon = true;
                score = 10* (height + width) + 10* mines - 5*timeElapsed;
                canClick = false;
                if (score > maxScore)
                {
                    maxScore = score;
                }
            }

            StateHasChanged();
        }

        if (game.board.hasMine(row, col))
        {
            gameLost = true;
            canClick = false;
        }
    }

    private void HandleRightClick(MouseEventArgs e, int row, int col)
    {
        if (!canClick)
        {
            return;
        }
        if (e.Button == 2)
        {
            if(!game.board.isRevealed(row,col))
            game.board.ToggleFlag(row, col);
        }
    }

    
    private void RestartGame()
{
    // Reset the game state
    game = null;
    gameLost = false;
    gameWon = false;
    showFields = true;
    timeElapsed = 0;
    score = 0;
    canClick = true;
    if (timer != null)
    {
        timer.Stop();
        timer = null;
    }
}
}

}